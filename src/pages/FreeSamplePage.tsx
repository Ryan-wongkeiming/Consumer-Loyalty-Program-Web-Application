import React, { useState, useEffect } from 'react';
import { ArrowLeft, Gift, CheckCircle, Users, Truck, Heart, AlertCircle } from 'lucide-react';
import { Link } from 'react-router-dom';
import { supabase } from '../lib/supabaseClient';
import { getAllProvinces, getWardsByProvince, Province, Ward } from '../utils/locationData';
import SearchableSelect from '../components/SearchableSelect';

interface FreeSampleType {
  id: string;
  name: string;
  stock: number;
  is_active: boolean;
}

const ThankYouScreen: React.FC = () => {
  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-teal-50 flex items-center justify-center px-4">
      <div className="max-w-md w-full bg-white rounded-2xl shadow-xl p-8 text-center">
        <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6">
          <CheckCircle className="w-12 h-12 text-green-600" />
        </div>
        
        <h1 className="text-2xl font-bold text-gray-900 mb-4">
          C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω! üéâ
        </h1>
        
        <p className="text-gray-600 mb-6">
          ƒê∆°n ƒëƒÉng k√Ω d√πng th·ª≠ mi·ªÖn ph√≠ c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ti·∫øp nh·∫≠n th√†nh c√¥ng. Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n s·ªõm nh·∫•t ƒë·ªÉ x√°c nh·∫≠n v√† giao h√†ng.
        </p>
        
        <div className="bg-gray-50 rounded-lg p-4 mb-6">
          <p className="text-sm text-gray-600 mb-2">
            <strong>Th·ªùi gian giao h√†ng:</strong> 3-5 ng√†y l√†m vi·ªác
          </p>
          <p className="text-sm text-gray-600">
            <strong>S·∫£n ph·∫©m:</strong> 2 g√≥i Blackmores C·∫£i Ti·∫øn M·ªõi
          </p>
        </div>
        
        <div className="flex items-center justify-center space-x-2 text-blue-600">
          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
          <span className="text-sm">ƒêang chuy·ªÉn v·ªÅ trang s·∫£n ph·∫©m...</span>
        </div>
      </div>
    </div>
  );
};

const FreeSamplePage: React.FC = () => {
  const [formData, setFormData] = useState({
    fullName: '',
    phone: '',
    email: '',
    babyName: '',
    babyBirthDate: '',
    address: '',
    city: '',
    ward: '',
    notes: '', // Optional notes
    sampleTypeId: '', // New field for selected sample type
  });

  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showThankYou, setShowThankYou] = useState(false);
  const [showConsentModal, setShowConsentModal] = useState(false);
  const [sampleTypes, setSampleTypes] = useState<FreeSampleType[]>([]);
  const [loadingSamples, setLoadingSamples] = useState(true); // New state for loading sample types
  const [errorMessage, setErrorMessage] = useState<string | null>(null); // New state for error messages

  // Location data state
  const [provinces, setProvinces] = useState<Province[]>([]);
  const [wards, setWards] = useState<Ward[]>([]);

  // Load provinces on component mount
  useEffect(() => {
    setProvinces(getAllProvinces());
    loadSampleTypes();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // Load available sample types from Supabase
  const loadSampleTypes = async () => {
    try {
      const { data, error } = await supabase
        .from('free_samples')
        .select('*')
        .eq('is_active', true)
        .order('name');

      if (error) {
        console.error('Error loading sample types:', error);
        setErrorMessage('Kh√¥ng th·ªÉ t·∫£i danh s√°ch m·∫´u. Vui l√≤ng th·ª≠ l·∫°i.'); // Set error message
      } else {
        setSampleTypes(data || []);
      }
    } catch (error) {
      console.error('Error loading sample types:', error);
      setErrorMessage('C√≥ l·ªói x·∫£y ra khi t·∫£i danh s√°ch m·∫´u.');
    } finally {
      setLoadingSamples(false);
    }
  };

  // Load wards when province changes
  useEffect(() => {
    if (formData.city) {
      setWards(getWardsByProvince(formData.city));
      setFormData(prev => ({ ...prev, ward: '' })); // Reset ward when province changes
    } else {
      setWards([]);
    }
  }, [formData.city]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));

    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!formData.sampleTypeId.trim()) {
      newErrors.sampleTypeId = 'Vui l√≤ng ch·ªçn lo·∫°i m·∫´u';
    }

    if (!formData.fullName.trim()) {
      newErrors.fullName = 'Vui l√≤ng nh·∫≠p h·ªç v√† t√™n';
    }

    if (!formData.phone.trim()) {
      newErrors.phone = 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i';
    } else if (!/^[0-9]{10,11}$/.test(formData.phone.replace(/\s/g, ''))) {
      newErrors.phone = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá';
    }

    if (!formData.address.trim()) {
      newErrors.address = 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ';
    }

    if (!formData.city.trim()) {
      newErrors.city = 'Vui l√≤ng ch·ªçn T·ªânh/Th√†nh ph·ªë';
    }

    if (!formData.ward.trim()) {
      newErrors.ward = 'Vui l√≤ng ch·ªçn Ph∆∞·ªùng/X√£';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Show consent modal first
    setShowConsentModal(true);
  };

  const handleConsentConfirm = async () => {
    setShowConsentModal(false);
    
    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);
    setErrorMessage(null); // Clear previous error messages

    try {
      // Get auth token if user is logged in
      const { data: { session } } = await supabase.auth.getSession();
      const authToken = session?.access_token;

      // Call the Edge Function
      const response = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/functions/v1/request-free-sample`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          ...(authToken && { 'Authorization': `Bearer ${authToken}` }),
        },
        body: JSON.stringify({
          fullName: formData.fullName,
          phone: formData.phone,
          email: formData.email || null,
          babyName: formData.babyName || null,
          babyBirthDate: formData.babyBirthDate || null,
          address: formData.address,
          city: formData.city,
          ward: formData.ward,
          notes: formData.notes || null,
          sampleTypeId: formData.sampleTypeId,
        }),
      });

      const result = await response.json();

      if (!response.ok) {
        if (result.outOfStock) {
          setErrorMessage(result.error); // Display out of stock message
          // Refresh sample types to update stock display
          await loadSampleTypes();
        } else {
          setErrorMessage(result.error || 'C√≥ l·ªói x·∫£y ra khi g·ª≠i y√™u c·∫ßu.');
        }
        return;
      }

      // Success - show thank you screen
      setShowThankYou(true);
      
      // Auto redirect after 4 seconds
      setTimeout(() => {
        window.location.href = '/';
      }, 4000);

    } catch (error) {
      console.error('Error submitting free sample request:', error);
      setErrorMessage('C√≥ l·ªói x·∫£y ra khi g·ª≠i y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleConsentCancel = () => {
    setShowConsentModal(false);
  };

  // Show Thank You screen if registration is completed
  if (showThankYou) {
    return <ThankYouScreen />;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-emerald-50">
      {/* Consent Modal */}
      {showConsentModal && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={handleConsentCancel}></div>
            
            <span className="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
            
            <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full">
              <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="sm:flex sm:items-start">
                  <div className="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-blue-100 sm:mx-0 sm:h-10 sm:w-10">
                    <AlertCircle className="h-6 w-6 text-blue-600" />
                  </div>
                  <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                    <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">
                      Th√¥ng b√°o quan tr·ªçng
                    </h3>
                    <div className="mt-2">
                      <p className="text-sm text-gray-700 leading-relaxed">
                        Theo khuy·∫øn c√°o c·ªßa T·ªï ch·ª©c Y t·∫ø Th·∫ø gi·ªõi (WHO), s·ªØa m·∫π l√† th·ª©c ƒÉn t·ªët nh·∫•t cho s·ª©c kh·ªèe v√† s·ª± ph√°t tri·ªÉn to√†n di·ªán c·ªßa tr·∫ª nh·ªè; c√°c y·∫øu t·ªë ch·ªëng nhi·ªÖm khu·∫©n, ƒë·∫∑c bi·ªát l√† kh√°ng th·ªÉ ch·ªâ c√≥ trong s·ªØa m·∫π c√≥ t√°c d·ª•ng gi√∫p tr·∫ª ph√≤ng, ch·ªëng b·ªánh ti√™u ch·∫£y, nhi·ªÖm khu·∫©n ƒë∆∞·ªùng h√¥ h·∫•p v√† m·ªôt s·ªë b·ªánh nhi·ªÖm khu·∫©n kh√°c.
                      </p>
                      <p className="text-sm text-gray-700 leading-relaxed mt-3">
                        N·ªôi dung b·∫°n ƒëang t√¨m ki·∫øm l√† th√¥ng tin v·ªÅ s·∫£n ph·∫©m t·ª´ nh√† s·∫£n xu·∫•t nh·∫±m m·ª•c ƒë√≠ch tr·ª£ gi√∫p ng∆∞·ªùi c√≥ nhu c·∫ßu t√¨m hi·ªÉu c√°c th√¥ng tin chi ti·∫øt v√† khoa h·ªçc v·ªÅ s·∫£n ph·∫©m, kh√¥ng nh·∫±m m·ª•c ƒë√≠ch qu·∫£ng c√°o. V√¨ v·∫≠y, b·∫°n vui l√≤ng x√°c nh·∫≠n r·∫±ng m√¨nh c√≥ nhu c·∫ßu v√† ch·ªß ƒë·ªông t√¨m hi·ªÉu c√°c th√¥ng tin v·ªÅ c√°c s·∫£n ph·∫©m sau khi ƒë√£ ƒë·ªçc v√† hi·ªÉu r√µ khuy·∫øn c√°o n√†y; ho·∫∑c vui l√≤ng x√°c nh·∫≠n b·∫°n l√† nh√¢n vi√™n y t·∫ø c√≥ nhu c·∫ßu t√¨m hi·ªÉu v·ªÅ s·∫£n ph·∫©m.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
              <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button
                  type="button"
                  onClick={handleConsentConfirm}
                  className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm transition-colors"
                >
                  X√°c nh·∫≠n
                </button>
                <button
                  type="button"
                  className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm transition-colors"
                  onClick={handleConsentCancel}
                >
                  B·ªè qua
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Header Section */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center justify-between">
            <Link
              to="/"
              className="inline-flex items-center text-blue-600 hover:text-blue-700 transition-colors group"
            >
              <ArrowLeft className="w-5 h-5 mr-2 group-hover:-translate-x-1 transition-transform" />
              Quay l·∫°i trang ch·ªß
            </Link>
            <div className="flex items-center space-x-2 text-emerald-600">
              <Gift className="w-6 h-6" />
              <span className="font-semibold">Mi·ªÖn ph√≠ 100%</span>
            </div>
          </div>
        </div>
      </div>

      {/* Hero Section */}
      <div className="relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-r from-orange-500/20 to-red-500/20"></div>
        <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
          <div className="text-center">
            <div className="inline-flex items-center justify-center w-20 h-20 bg-gradient-to-r from-orange-500 to-red-500 rounded-full mb-6 animate-bounce">
              <Gift className="w-10 h-10 text-white" />
            </div>
            <div className="bg-gradient-to-r from-orange-500 to-red-500 text-white px-6 py-2 rounded-full inline-block mb-4 font-bold text-lg animate-pulse">
              üî• ∆ØU ƒê√ÉI C√ì H·∫†N - NHANH TAY! üî•
            </div>
            <h1 className="text-4xl md:text-6xl font-bold text-gray-900 mb-6">
              Tr·∫£i Nghi·ªám Blackmores
            </h1>
            <div className="text-2xl md:text-3xl font-bold text-orange-600 mb-4">
              MI·ªÑN PH√ç 100% - 2 G√ìI D√ôNG TH·ª¨
            </div>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto mb-8">
              Kh√°m ph√° s·ª©c m·∫°nh c·ªßa dinh d∆∞·ª°ng √öc v·ªõi 2 g√≥i Blackmores ho√†n to√†n MI·ªÑN PH√ç!
            </p>
            
            {/* Urgency Counter */}
            <div className="bg-red-600 text-white px-6 py-3 rounded-full inline-block mb-8 font-bold text-lg animate-pulse">
              ‚è∞ CH·ªà C√íN 48 GI·ªú - S·ªê L∆Ø·ª¢NG C√ì H·∫†N!
            </div>
            
            {/* Social Proof */}
            <div className="bg-white/90 backdrop-blur-sm rounded-xl p-4 mb-8 max-w-md mx-auto">
              <div className="flex items-center justify-center space-x-4 text-gray-700">
                <div className="text-center">
                  <div className="text-2xl font-bold text-orange-600">15,000+</div>
                  <div className="text-sm">ƒê√£ ƒëƒÉng k√Ω</div>
                </div>
                <div className="w-px h-8 bg-gray-300"></div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-orange-600">4.8‚òÖ</div>
                  <div className="text-sm">ƒê√°nh gi√°</div>
                </div>
                <div className="w-px h-8 bg-gray-300"></div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-orange-600">98%</div>
                  <div className="text-sm">H√†i l√≤ng</div>
                </div>
              </div>
            </div>
            
            {/* Testimonial */}
            <div className="bg-white/80 backdrop-blur-sm rounded-xl p-6 mb-8 max-w-2xl mx-auto">
              <div className="flex items-center space-x-4">
                <img
                  src="https://images.pexels.com/photos/1239291/pexels-photo-1239291.jpeg?auto=compress&cs=tinysrgb&w=100"
                  alt="Customer"
                  className="w-12 h-12 rounded-full object-cover"
                />
                <div className="flex-1 text-left">
                  <p className="text-gray-700 italic text-sm">
                    "T√¥i ƒë√£ th·ª≠ m·∫´u mi·ªÖn ph√≠ v√† th·ª±c s·ª± ·∫•n t∆∞·ª£ng v·ªõi ch·∫•t l∆∞·ª£ng. Gi·ªù t√¥i l√† kh√°ch h√†ng th∆∞·ªùng xuy√™n!"
                  </p>
                  <p className="text-gray-500 text-xs mt-1">- Nguy·ªÖn Th·ªã Mai, H√† N·ªôi</p>
                </div>
              </div>
            </div>
            
            <p className="text-lg text-gray-600 max-w-3xl mx-auto mb-8">
              ‚ú® Kh√¥ng m·∫•t ph√≠, thao t√°c ƒë∆°n gi·∫£n - Ch·ªâ c·∫ßn 2 ph√∫t ƒëƒÉng k√Ω!
            </p>
            
            {/* Benefits Grid */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto mb-12">
              <div className="bg-white/80 backdrop-blur-sm rounded-xl p-6 shadow-sm border border-white/50">
                <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-4">
                  <CheckCircle className="w-6 h-6 text-blue-600" />
                </div>
                <h3 className="font-semibold text-gray-900 mb-2">Ho√†n to√†n mi·ªÖn ph√≠</h3>
                <p className="text-gray-600 text-sm">Kh√¥ng m·∫•t ph√≠ v·∫≠n chuy·ªÉn, thao t√°c ƒë∆°n gi·∫£n</p>
              </div>
              
              <div className="bg-white/80 backdrop-blur-sm rounded-xl p-6 shadow-sm border border-white/50">
                <div className="w-12 h-12 bg-emerald-100 rounded-lg flex items-center justify-center mx-auto mb-4">
                  <Truck className="w-6 h-6 text-emerald-600" />
                </div>
                <h3 className="font-semibold text-gray-900 mb-2">Giao h√†ng t·∫≠n n∆°i</h3>
                <p className="text-gray-600 text-sm">Nh·∫≠n s·∫£n ph·∫©m ngay t·∫°i nh√† trong 3-5 ng√†y</p>
              </div>
              
              <div className="bg-white/80 backdrop-blur-sm rounded-xl p-6 shadow-sm border border-white/50">
                <div className="w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center mx-auto mb-4">
                  <Heart className="w-6 h-6 text-orange-600" />
                </div>
                <h3 className="font-semibold text-gray-900 mb-2">ChƒÉm s√≥c s·ª©c kh·ªèe</h3>
                <p className="text-gray-600 text-sm">Tr·∫£i nghi·ªám ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m cao c·∫•p</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Registration Form Section */}
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 pb-16" id="registration-form">
        <div className="bg-white rounded-2xl shadow-xl border border-gray-100 overflow-hidden">
          <div className="bg-gradient-to-r from-blue-600 to-emerald-600 px-8 py-6">
            <div className="flex items-center justify-center space-x-3">
              <Users className="w-6 h-6 text-white" />
              <h2 className="text-2xl font-bold text-white">Th√¥ng tin ƒëƒÉng k√Ω</h2>
            </div>
            <p className="text-blue-100 text-center mt-2">
              Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ nh·∫≠n s·∫£n ph·∫©m d√πng th·ª≠
            </p>
          </div>
          
          <div className="p-8">
            <form onSubmit={handleSubmit}>
              <div className="space-y-6">
                {/* Sample Type Selection */}
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Ch·ªçn lo·∫°i m·∫´u</h3>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Lo·∫°i m·∫´u *
                    </label>
                    {loadingSamples ? (
                      <div className="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 flex items-center justify-center">
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2"></div>
                        <span className="text-gray-500">ƒêang t·∫£i...</span>
                      </div>
                    ) : (
                      <select
                        name="sampleTypeId"
                        value={formData.sampleTypeId}
                        onChange={handleInputChange}
                        className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                          errors.sampleTypeId ? 'border-red-500' : 'border-gray-300'
                        }`}
                      >
                        <option value="">Ch·ªçn lo·∫°i m·∫´u</option>
                        {sampleTypes.map((sampleType) => (
                          <option 
                            key={sampleType.id}
                            value={sampleType.id}
                            disabled={sampleType.stock <= 0}
                          >
                            {sampleType.name} {sampleType.stock <= 0 ? '(H·∫øt h√†ng)' : `(C√≤n ${sampleType.stock})`}
                          </option>
                        ))}
                      </select>
                    )}
                    {errors.sampleTypeId && (
                      <p className="text-red-500 text-sm mt-1">{errors.sampleTypeId}</p>
                    )}
                  </div>
                </div>

                {/* Personal Information */}
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Th√¥ng tin c√° nh√¢n</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        H·ªç v√† t√™n *
                      </label>
                      <input
                        type="text"
                        name="fullName"
                        value={formData.fullName}
                        onChange={handleInputChange}
                        className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                          errors.fullName ? 'border-red-500' : 'border-gray-300'
                        }`}
                        placeholder="Nh·∫≠p h·ªç v√† t√™n"
                      />
                      {errors.fullName && (
                        <p className="text-red-500 text-sm mt-1">{errors.fullName}</p>
                      )}
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        S·ªë ƒëi·ªán tho·∫°i *
                      </label>
                      <input
                        type="tel"
                        name="phone"
                        value={formData.phone}
                        onChange={handleInputChange}
                        className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                          errors.phone ? 'border-red-500' : 'border-gray-300'
                        }`}
                        placeholder="VD: 0XXXXXXXXX"
                      />
                      {errors.phone && (
                        <p className="text-red-500 text-sm mt-1">{errors.phone}</p>
                      )}
                    </div>
                  </div>

                  <div className="mt-4">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Email (t√πy ch·ªçn)
                    </label>
                    <input
                      type="email"
                      name="email"
                      value={formData.email}
                      onChange={handleInputChange}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email"
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        T√™n c·ªßa b√© (t√πy ch·ªçn)
                      </label>
                      <input
                        type="text"
                        name="babyName"
                        value={formData.babyName}
                        onChange={handleInputChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="Nh·∫≠p t√™n c·ªßa b√©"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Ng√†y sinh/Ng√†y d·ª± sinh (t√πy ch·ªçn)
                      </label>
                      <input
                        type="date"
                        name="babyBirthDate"
                        value={formData.babyBirthDate}
                        onChange={handleInputChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      />
                    </div>
                  </div>
                </div>

                {/* Address Information */}
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">ƒê·ªãa ch·ªâ giao h√†ng</h3>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ƒê·ªãa ch·ªâ c·ª• th·ªÉ *
                      </label>
                      <input
                        type="text"
                        name="address"
                        value={formData.address}
                        onChange={handleInputChange}
                        className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                          errors.address ? 'border-red-500' : 'border-gray-300'
                        }`}
                        placeholder="S·ªë nh√†, t√™n ƒë∆∞·ªùng"
                      />
                      {errors.address && (
                        <p className="text-red-500 text-sm mt-1">{errors.address}</p>
                      )}
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          T·ªânh/Th√†nh ph·ªë *
                        </label>
                        <SearchableSelect
                          options={provinces}
                          value={formData.city}
                          onChange={(value) => handleInputChange({ target: { name: 'city', value } } as any)}
                          placeholder="Ch·ªçn t·ªânh/th√†nh ph·ªë"
                          name="city"
                          error={!!errors.city}
                        />
                        {errors.city && (
                          <p className="text-red-500 text-sm mt-1">{errors.city}</p>
                        )}
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Ph∆∞·ªùng/X√£ *
                        </label>
                        <SearchableSelect
                          options={wards}
                          value={formData.ward}
                          onChange={(value) => handleInputChange({ target: { name: 'ward', value } } as any)}
                          placeholder="Ch·ªçn ph∆∞·ªùng/x√£"
                          name="ward"
                          disabled={!formData.city}
                          error={!!errors.ward}
                        />
                        {errors.ward && (
                          <p className="text-red-500 text-sm mt-1">{errors.ward}</p>
                        )}
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Ghi ch√∫ (t√πy ch·ªçn)
                      </label>
                      <textarea
                        name="notes"
                        value={formData.notes}
                        onChange={handleInputChange}
                        rows={3}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="Ghi ch√∫ cho ƒë∆°n h√†ng (t√πy ch·ªçn)"
                      />
                    </div>
                  </div>
                </div>

                {/* Error Message Display */}
                {errorMessage && (
                  <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                    <div className="flex items-center space-x-2">
                      <AlertCircle className="w-5 h-5 text-red-600 flex-shrink-0" />
                      <span className="text-red-700">{errorMessage}</span>
                    </div>
                  </div>
                )}


                {/* Submit Button */}
                <div className="pt-6">
                  <button
                    type="submit"
                    disabled={isSubmitting || loadingSamples || !formData.sampleTypeId}
                    className="w-full bg-gradient-to-r from-blue-600 to-emerald-600 text-white py-4 rounded-lg font-semibold text-lg hover:from-blue-700 hover:to-emerald-700 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed transform hover:scale-[1.02]"
                  >
                    {isSubmitting ? (
                      <div className="flex items-center justify-center space-x-2">
                        <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                        <span>ƒêang x·ª≠ l√Ω...</span>
                      </div>
                    ) : loadingSamples ? (
                      'ƒêang t·∫£i lo·∫°i m·∫´u...'
                    ) : !formData.sampleTypeId ? (
                      'Vui l√≤ng ch·ªçn lo·∫°i m·∫´u'
                    ) : (
                      'ƒêƒÉng k√Ω d√πng th·ª≠ mi·ªÖn ph√≠'
                    )}
                  </button>
                </div>

                {/* Policy Agreement */}
                <div className="text-center text-sm text-gray-600">
                  <p>
                    B·∫±ng vi·ªác ƒëƒÉng k√Ω, b·∫°n ƒë·ªìng √Ω v·ªõi{' '}
                    <a href="#" className="text-blue-600 hover:underline">
                      ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng
                    </a>{' '}
                    v√†{' '}
                    <a href="#" className="text-blue-600 hover:underline">
                      Ch√≠nh s√°ch b·∫£o m·∫≠t
                    </a>{' '}
                    c·ªßa Blackmores
                  </p>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>

      {/* Additional Information */}
      <div className="bg-gray-50 py-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">
              T·∫°i sao ch·ªçn Blackmores?
            </h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              <strong>S·∫£n ph·∫©m:</strong> 2 g√≥i Blackmores C·∫£i Ti·∫øn M·ªõi
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <div className="text-center">
              <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <div className="w-8 h-8 bg-blue-600 rounded-full"></div>
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">Ch·∫•t l∆∞·ª£ng cao c·∫•p</h3>
              <p className="text-gray-600">
                Ki·ªÉm tra nghi√™m ng·∫∑t v√† ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng cho m·ªçi s·∫£n ph·∫©m
              </p>
            </div>

            <div className="text-center">
              <div className="w-16 h-16 bg-emerald-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <div className="w-8 h-8 bg-emerald-600 rounded-full"></div>
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">C√¥ng th·ª©c chuy√™n gia</h3>
              <p className="text-gray-600">
                ƒê∆∞·ª£c ph√°t tri·ªÉn b·ªüi ƒë·ªôi ng≈© chuy√™n gia dinh d∆∞·ª°ng v√† s·ª©c kh·ªèe
              </p>
            </div>

            <div className="text-center">
              <div className="w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <div className="w-8 h-8 bg-orange-600 rounded-full"></div>
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">Th∆∞∆°ng hi·ªáu uy t√≠n</h3>
              <p className="text-gray-600">
                Th∆∞∆°ng hi·ªáu s·ª©c kh·ªèe t·ª± nhi√™n ƒë∆∞·ª£c tin t∆∞·ªüng nh·∫•t Australia t·ª´ 1930
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Floating Action Button */}
      <div className="fixed bottom-6 right-6 z-50">
        <button
          onClick={() => {
            const formSection = document.getElementById('registration-form');
            if (formSection) {
              formSection.scrollIntoView({ behavior: 'smooth' });
            }
          }}
          className="bg-gradient-to-r from-blue-600 to-emerald-600 text-white p-4 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 group animate-pulse"
          title="ƒêƒÉng k√Ω ngay"
        >
          <Gift className="w-6 h-6 group-hover:rotate-12 transition-transform" />
        </button>
      </div>
    </div>
  );
};

export default FreeSamplePage;